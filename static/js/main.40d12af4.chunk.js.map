{"version":3,"sources":["logo.png","components/Navbar/Navbar.js","components/House/House.js","worldHouseData.js","components/WorldHouseList/WorldHouseList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","src","logo","alt","href","House","detailHandler","setState","detail","state","this","props","house","id","country","img","description","onClick","deleteHouse","React","Component","worldHouseData","WorldHouseList","houses","filter","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,kC,sOCkB5BC,MAdf,WACI,OACI,yBAAKC,UAAU,UACX,yBAAKC,IAAKC,IAAMF,UAAU,cAAcG,IAAI,SAC5C,wBAAIH,UAAU,gBACV,4BAAI,uBAAGI,KAAK,QAAQJ,UAAU,sBAC1B,uBAAGA,UAAU,2BADb,SAEJ,4BAAI,uBAAGI,KAAK,QAAQJ,UAAU,yCAC1B,uBAAGA,UAAU,2BADb,c,mCCsCLK,G,kBA7CX,aAAe,IAAD,8BACV,+CAMJC,cAAgB,WACZ,EAAKC,SAAS,CACVC,QAAS,EAAKC,MAAMD,UAPxB,EAAKC,MAAQ,CACTD,QAAQ,GAHF,E,sEAcJ,IAAD,SACmCE,KAAKC,MAAMC,MAA7CC,EADD,EACCA,GAAIC,EADL,EACKA,QAASC,EADd,EACcA,IAAKC,EADnB,EACmBA,YAKxB,OACI,yBAAKH,GAAG,OAAOb,UAAU,SACrB,yBAAKA,UAAU,mBACX,yBAAKC,IAAKc,EAAKZ,IAAI,eAAeH,UAAU,2BAC5C,0BAAMiB,QAAS,kBAAM,EAAKN,MAAMO,YAAYL,IAAKb,UAAU,6BACvD,uBAAGA,UAAU,0BAGrB,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,sBAAsBc,GACpC,wBAAId,UAAU,sBAAd,SAEI,0BAAMiB,QAASP,KAAKJ,eAChB,uBAAGN,UAAU,gCAhBX,IAoBOU,KAAKD,MAAMD,OApBX,2BAAIQ,GAAmB,W,GAlBxCG,IAAMC,YCHfC,G,MAAiB,CAC1B,CACER,GAAI,EACJC,QAAS,QACTC,IAAK,2BACLC,YACE,kJAEJ,CACEH,GAAI,EACJC,QAAS,UACTC,IAAK,6BACLC,YACE,kJAEJ,CACEH,GAAI,EACJC,QAAS,SACTC,IAAK,4BACLC,YACE,kJAEJ,CACEH,GAAI,EACJC,QAAS,QACTC,IAAK,2BACLC,YACE,oJCSSM,E,YA9BX,aAAe,IAAD,8BACV,+CAMJJ,YAAc,SAACL,GACX,EAAKN,SAAS,CACVgB,OAAQ,EAAKd,MAAMc,OAAOC,QAAO,SAAAZ,GAAK,OAAIA,EAAMC,KAAOA,QAP3D,EAAKJ,MAAQ,CACTc,OAAQF,GAHF,E,sEAaJ,IAAD,OACL,OACI,yBAAKrB,UAAU,kBAEPU,KAAKD,MAAMc,OAAOE,KAAI,SAAAb,GAAK,OACvB,kBAAC,EAAD,CACIc,IAAKd,EAAMC,GACXD,MAAOA,EACPM,YAAa,EAAKA,sB,GAtBjBC,IAAMC,W,YCUpBO,MATf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.40d12af4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f0556276.png\";","import React from 'react';\nimport logo from '../../logo.png';\nimport './navbar.scss';\n\nfunction Navbar() {\n    return (\n        <nav className='navbar'>\n            <img src={logo} className='navbar-logo' alt='logo' />\n            <ul className='navbar-links'>\n                <li><a href='/home' className='navbar-links-link '>\n                    <i className='fas fa-home fa-1x icon' />HOME</a></li>\n                <li><a href='/home' className='navbar-links-link navbar-links-active'>\n                    <i className='fas fa-home fa-1x icon' />HOUSES</a></li>\n            </ul>\n        </nav>\n    );\n}\n\nexport default Navbar;","import React from 'react';\nimport './house.scss';\n\nclass House extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            detail: false\n        };\n    }\n\n    detailHandler = () => {\n        this.setState({\n            detail: !this.state.detail\n        });\n    }\n\n\n    render() {\n        let { id, country, img, description } = this.props.house;\n        let expandDetail = (detail) => {\n            return detail === true ? <p>{description}</p> : null\n        }\n\n        return (\n            <div id='home' className='house'>\n                <div className='house-container'>\n                    <img src={img} alt='World Houses' className='house-container-images' />\n                    <span onClick={() => this.props.deleteHouse(id)} className='house-container-close-btn'>\n                        <i className='fas fa-window-close' />\n                    </span>\n                </div>\n                <div className='house-detail'>\n                    <h2 className='house-detail-title'>{country}</h2>\n                    <h3 className='house-detail-block'>\n                        Detail\n                        <span onClick={this.detailHandler}>\n                            <i className='fas fa-caret-square-down' />\n                        </span>\n                    </h3>\n                    {\n                        expandDetail(this.state.detail)\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default House;","export let worldHouseData = [\n  {\n    id: 1,\n    country: \"Japan\",\n    img: \"./images/japan-house.jpg\",\n    description:\n      \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Tenetur, nam omnis error corrupti eum assumenda enim odit architecto corporis. Sequi\"\n  },\n  {\n    id: 2,\n    country: \"Iceland\",\n    img: \"./images/iceland-house.jpg\",\n    description:\n      \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Tenetur, nam omnis error corrupti eum assumenda enim odit architecto corporis. Sequi\"\n  },\n  {\n    id: 3,\n    country: \"Norway\",\n    img: \"./images/norway-house.jpg\",\n    description:\n      \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Tenetur, nam omnis error corrupti eum assumenda enim odit architecto corporis. Sequi\"\n  },\n  {\n    id: 4,\n    country: \"Egypt\",\n    img: \"./images/egypt-house.jpg\",\n    description:\n      \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Tenetur, nam omnis error corrupti eum assumenda enim odit architecto corporis. Sequi\"\n  },\n];\n","import React from 'react';\nimport House from '../House/House';\nimport './worldhouselist.scss';\nimport { worldHouseData } from '../../worldHouseData';\n\nclass WorldHouseList extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            houses: worldHouseData\n        };\n    }\n\n    deleteHouse = (id) => {\n        this.setState({\n            houses: this.state.houses.filter(house => house.id !== id)\n        });\n    }\n\n    render() {\n        return (\n            <div className='worldhouselist'>\n                {\n                    this.state.houses.map(house => (\n                        <House\n                            key={house.id}\n                            house={house}\n                            deleteHouse={this.deleteHouse}\n                        ></House>\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nexport default WorldHouseList;","import React from 'react';\nimport Navbar from './components/Navbar/Navbar';\nimport WorldHouseList from './components/WorldHouseList/WorldHouseList';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar/> \n      <WorldHouseList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}